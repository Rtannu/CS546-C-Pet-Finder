    try {
      let form = new formidable.IncomingForm();
      form.parse(request, async (err, fields, files) => {
        if (err) {
          return res.status(400).json({
            error: true,
            message: "There was an error parsing the files",
          });
        }
        else if (!files || Object.keys(files).length == 0 || !files.picture) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            picture: "picture is required"
          });
        }
        else if (files.picture.size <= 0) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            picture: "picture size is zero"
          });
        }
        const isValid = commonValidators.isValidFile(files.picture);
        if (!isValid) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            picture: "Only jpg, jpeg or png are required!"
          });
        }
        // Schema validation
        const requestKeyList = Object.keys(fields);
        const postBodyKeys = ["firstName", "middleName", "lastName", "email", "phoneNumber", "password", "address", "city", "state", "zip"];

        for (let requestKey of postBodyKeys) {
          if (requestKeyList.indexOf(requestKey) === -1) {
            return res.status(400).json({
              error: true,
              message: `${requestKey} key is missing in body`,
            });
          }
        }
        if (requestKeyList.length !== postBodyKeys.length) {
          return res.status(400).json({
            error: true,
            message: "Json body is invalid",
          });
        }
        Object.keys(fields).forEach(function (key) {
          fields[key] = (fields[key]).trim();
        });
        const firstName = xss(fields.firstName);
        const middleName = xss(fields.middleName);
        const lastName = xss(fields.lastName);
        const email = xss(fields.email);
        const phoneNumber = xss(fields.phoneNumber);
        const password = xss(fields.password);
        const address = xss(fields.address);
        const city = xss(fields.city);
        const state = xss(fields.state);
        const zip = xss(fields.zip);
        const picture = xss(files.picture.originalFilename);

        // FirstName string validation
        let isValidFirstName = commonValidators.isValidString(firstName, 'firstName');
        if (!isValidFirstName[0]) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            firstName: isValidFirstName[1]
          });
        }

        // FirstName alphabet validation
        isValidFirstName = commonValidators.isValidName(firstName, 'firstName');
        if (!isValidFirstName[0]) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            firstName: isValidFirstName[1]
          });
        }

        // MiddleName validation
        if (middleName) {
          let isValidMiddleName = commonValidators.isValidString(middleName, 'middleName');
          if (!isValidMiddleName[0]) {
            return res.status(400).json({
              error: true,
              message: "Invalid input",
              middleName: isValidMiddleName[1]
            });
          }

          isValidMiddleName = commonValidators.isValidName(middleName, 'middleName');
          if (!isValidMiddleName[0]) {
            return res.status(400).json({
              error: true,
              message: "Invalid input",
              middleName: isValidMiddleName[1]
            });
          }
        }

        // LastName string validation
        let isValidLastName = commonValidators.isValidString(lastName, 'lastName');
        if (!isValidLastName[0]) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            lastName: isValidLastName[1]
          });
        }

        // LastName alphabet validation
        isValidLastName = commonValidators.isValidName(lastName, 'lastName');
        if (!isValidLastName[0]) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            lastName: isValidLastName[1]
          });
        }

        // Email validation
        if (!email || email.trim() == "") {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            email: `email is required`
          })
        }

        if (!emailValidator.validate(email)) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            email: `${email} is invalid email format`
          })
        }

        // PhoneNumber validation
        if (!phoneNumber) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            phoneNumber: "phoneNumber is required"
          })
        }

        let isValidPhoneNumber = commonValidators.isValidPhoneNumber(phoneNumber, 'phoneNumber');
        if (!isValidPhoneNumber[0]) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            phoneNumber: isValidPhoneNumber[1]
          })
        }

        // Password validation
        let isValidPassword = commonValidators.isValidString(password, 'password');
        if (!isValidPassword[0]) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            password: isValidPassword[1]
          });
        }

        if (password.length < 6) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            password: 'password should have at least 6 characters'
          });
        }

        // Address string validation
        let isValidAddress = commonValidators.isValidString(address, 'address');
        if (!isValidAddress[0]) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            address: isValidAddress[1]
          });
        }

        isValidAddress = commonValidators.isValidAddress(address, 'address');
        if (!isValidAddress[0]) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            address: isValidAddress[1]
          });
        }

        // City string validation
        let isValidCity = commonValidators.isValidString(city, 'city');
        if (!isValidCity[0]) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            city: isValidCity[1]
          });
        }

        isValidCity = commonValidators.isValidName(city, 'city');
        if (!isValidCity[0]) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            city: isValidCity[1]
          });
        }

        // State string validation
        let isValidState = commonValidators.isValidString(state, 'state');
        if (!isValidState[0]) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            state: isValidState[1]
          });
        }

        isValidState = commonValidators.isValidName(state, 'state');
        if (!isValidState[0]) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            state: isValidState[1]
          });
        }

        // Zip string validation
        let isValidZip = commonValidators.isValidString(zip, 'zip');
        if (!isValidZip[0]) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            zip: isValidZip[1]
          });
        }

        isValidZip = commonValidators.isValidInteger(zip, 'zip');
        if (!isValidZip[0]) {
          return res.status(400).json({
            error: true,
            message: "Invalid input",
            zip: isValidZip[1]
          });
        }

        try {
          const result = await usersData.createUser(firstName, middleName, lastName, email, phoneNumber, password, address, city, state, zip, picture);
          return res.json(result);
        } catch (e) {
          if (e === `${email.trim().toLowerCase()} is already exist, please use another`) {
            return res.status(400).json({
              error: true,
              message: "Invalid input",
              email: `${email.trim()} is already exist, please use another`
            });
          } else {
            return res.status(500).json({
              error: true,
              message: e,
            });
          }
        }

      });

      form.on('fileBegin', function (name, file) {
        file.filepath = 'public/uploads/images/users/' + file.originalFilename;
      });

    } catch (e) {
      return res.status(500).json({
        error: true,
        message: e,
      });
    }
  });








  
    .post('/upload', trimRequest.all, async (req, res) => {
        // Validation
        let name = xss(req.body.name);
        let type = xss(req.body.type);
        let breed = xss(req.body.breed);
        let age = xss(req.body.age);
        let size = xss(req.body.size);
        let gender = xss(req.body.gender);
        let color = xss(req.body.color);
        let address = xss(req.body.address);
        let zip = xss(req.body.zip);
        let city = xss(req.body.city);
        let state = xss(req.body.state);
        let description = xss(req.body.description);
        let ownerId = xss(req.body.ownerId);
        let picture = xss(req.body.picture);

        // Validate name
        try {
            nameTests(name);
        } catch (e) {
            return res.status(400).json({
                error: true,
                message: e,
                name: name
            });
        }

        // Validate type
        try {
            typeTests(type);
        } catch (e) {
            return res.status(400).json({
                error: true,
                message: e,
                type: type
            });
        }

        // Validate breed
        try {
            breedTests(breed);
        } catch (e) {
            return res.status(400).json({
                error: true,
                message: e,
                breed: breed
            });
        }

        // Validate age
        try {
            ageTests(age);
        } catch (e) {
            return res.status(400).json({
                error: true,
                message: e,
                age: age
            });
        }

        // Validate size
        try {
            sizeTests(size);
        } catch (e) {
            return res.status(400).json({
                error: true,
                message: e,
                size: size
            });
        }

        // Validate gender
        try {
            genderTests(gender);
        } catch (e) {
            return res.status(400).json({
                error: true,
                message: e,
                size: size
            });
        }

        // Validate color
        try {
            colorTests(color);
        } catch (e) {
            return res.status(400).json({
                error: true,
                message: e,
                color: color
            });
        }

        // Validate address
        try {
            addressTests(address);
        } catch (e) {
            return res.status(400).json({
                error: true,
                message: e,
                address: address
            });
        }

        // Validate zip
        try {
            zipTests(zip);
        } catch (e) {
            return res.status(400).json({
                error: true,
                message: e,
                zip: zip
            });
        }

        // Validate city
        try {
            cityTests(city);
        } catch (e) {
            return res.status(400).json({
                error: true,
                message: e,
                city: city
            });
        }

        // Validate state
        try {
            stateTests(state);
        } catch (e) {
            return res.status(400).json({
                error: true,
                message: e,
                state: state
            });
        }

        // Validate description
        try {
            descriptionTests(description);
        } catch (e) {
            return res.status(400).json({
                error: true,
                message: e,
                description: description
            });
        }

        // Validate ownerId
        try {
            ownerIdTests(ownerId);
        } catch (e) {
            return res.status(400).json({
                error: true,
                message: e,
                ownerId: ownerId
            });
        }

        // Validate picture
        try {
            pictureTests(picture);
        } catch (e) {
            return res.status(400).json({
                error: true,
                message: e,
                picture: picture
            });
        }

        // Response
        try {
            const pet = await petsData.createPet(name, type, breed, age, size, gender, color, address, zip, city, state, description, ownerId, picture);
            pet.error = false;
            res.status(200).json(pet);
        } catch (e) {
            res.status(500).json({
                error: true,
                message: e
            });
        }
    });

